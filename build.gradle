defaultTasks 'clean', 'release_build', 'runTests'

// Apply plugins
apply plugin: 'c'

// Basic project information
group = 'LinkedNeurons'
archivesBaseName = 'njgr'
version = '1.0.0-SNAPSHOT'

// Extended project information
ext.projectName = 'NeuronsJustGotReal'
ext.inceptionYear = '2014'
ext.packaging = 'tar'
ext.url = ''
ext.description = 'A C library for neural networks.'
ext.organization = 'LinkedNeurons'

libraries {
	njgr {}
	njgr_graphics {
		binaries.all {
			cCompiler.args '-I', "/usr/local/include"
			linker.args '-lSDL', '-lSDL_draw'
		}
	}
}

executables {
	test {
		binaries.all {
			cCompiler.args '-I', "/usr/local/include"
			linker.args '-lcunit'
		}
	}
	sample_graphics {
		binaries.all {
			cCompiler.args '-I', "/usr/local/include"
			linker.args '-lSDL'
		}
	}
}

sources {
	njgr {
		c {
			source {
				include "**/*.c"
			}
		}
	}
	njgr_graphics {
		c {
			lib libraries.njgr
			source {
				include "**/*.c"
			}
		}
	}
	test {
		c {
			lib libraries.njgr
			source {
				include "**/*.c"
			}
		}
	}
	sample_graphics {
		c {
			lib libraries.njgr
			lib libraries.njgr_graphics
			source {
				include "**/*.c"
			}
		}
	}
}

model {
	buildTypes {
		debug {}
		release {}
	}
}

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {}
}

task release_build {
	dependsOn binaries.withType(SharedLibraryBinary).matching {
		it.buildable && it.buildType == buildTypes.release
	}
	dependsOn binaries.withType(ExecutableBinary).matching {
		it.buildable && it.buildType == buildTypes.release
	}
}

task debug_build {
	dependsOn binaries.withType(SharedLibraryBinary).matching {
		it.buildable && it.buildType == buildTypes.debug
	}
	dependsOn binaries.withType(ExecutableBinary).matching {
		it.buildable && it.buildType == buildTypes.debug
	}
}

task runTests(type:Exec) {
	dependsOn release_build
	workingDir './build/install/testExecutable/release'
	commandLine './test'
}

afterEvaluate {
	runTests.dependsOn installReleaseTestExecutable
}

binaries.all {
	if (toolChain in Gcc || toolChain in Clang) {
		cCompiler.args "-Wall", "-Wextra", "--std=c99"
		if (buildType == buildTypes.debug) {
			cCompiler.args "-g"
		} else {
			cCompiler.args "-O3"
		}
	}
}
